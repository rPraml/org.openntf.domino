/*
 * Â© Copyright FOCONIS AG, 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 * 
 */
package org.openntf.domino.commons.i18n;

import java.util.List;
import java.util.Locale;

import org.openntf.domino.commons.ServiceLocator;

/**
 * Base class for a message provider which is to be used in Messages-classes generated by Eclipse-"Externalize Strings". Appropriate
 * subclasses of <code>MessageProviderAbstract</code> provide 1) suitable "raw text" providers, 2) suitable mechanisms to "cook" such raw
 * texts using parameters, e.g. by employing Formula Language (see {@link FormulaMessageProviderAbstract}).
 * 
 * @author Praml, Steinsiek
 *
 */
public abstract class MessageProviderAbstract {

	/** Returns the raw text for the triple bundleName/key/locale, returning some default, if no text is found. */
	public String getRawText(final String bundleName, final String key, final Locale loc) {
		return getRawTextEx(true, bundleName, key, loc);
	}

	/** Returns the raw text for the triple bundleName/key/locale, returning <code>null</code>, if no text is found. */
	public String getRawTextNoDef(final String bundleName, final String key, final Locale loc) {
		return getRawTextEx(false, bundleName, key, loc);
	}

	/** Implementing method for <code>getRawText</code> / <code>getRawTextNoDef</code> */
	protected String getRawTextEx(final boolean retDefIfNotAvail, final String bundleName, final String key, final Locale loc) {
		String ret = null;
		for (RawMessageProviderAbstract prov : findRawMessageProviders())
			if ((ret = prov.getRawText(bundleName, key, loc)) != null)
				break;
		return (ret == null && retDefIfNotAvail) ? getDefaultString(bundleName, key, loc) : ret;
	}

	/** Convenience static method for <code>getRawText</code> */
	public static String sGetRawText(final String bundleName, final String key, final Locale loc) {
		return getCurrentInstance().getRawText(bundleName, key, loc);
	}

	/** Convenience static method for <code>getRawTextNoDef</code> */
	public static String sGetRawTextNoDef(final String bundleName, final String key, final Locale loc) {
		return getCurrentInstance().getRawTextNoDef(bundleName, key, loc);
	}

	/** Returns a default string, if no text is found */
	protected String getDefaultString(final String bundleName, final String key, final Locale loc) {
		return "[&]Invalid TextID '" + bundleName + "/" + key + "'";
	}

	/**
	 * Returns the cooked text, based on the external locale (= browser locale), using the argument list <code>args</code>. If no text is
	 * found, <code>getDefaultString</code> is returned.
	 */
	public String getString(final String bundleName, final String key, final Object... args) {
		return getCookedText(true, bundleName, key, getExternalLocale(), args);
	}

	/**
	 * Returns the cooked text, based on the external locale (= browser locale), using the argument list <code>args</code>. If no text is
	 * found, <code>null</code> is returned.
	 */
	public String getStringNoDef(final String bundleName, final String key, final Object... args) {
		return getCookedText(false, bundleName, key, getExternalLocale(), args);
	}

	/** Convenience static method for <code>getString</code> */
	public static String sGetString(final String bundleName, final String key, final Object... args) {
		return getCurrentInstance().getString(bundleName, key, args);
	}

	/** Convenience static method for <code>getStringNoDef</code> */
	public static String sGetStringNoDef(final String bundleName, final String key, final Object... args) {
		return getCurrentInstance().getStringNoDef(bundleName, key, args);
	}

	/**
	 * Returns the cooked text, based on the internal locale (= db/os locale), using the argument list <code>args</code>. If no text is
	 * found, <code>getDefaultString</code> is returned.
	 */
	public String getInternalString(final String bundleName, final String key, final Object... args) {
		return getCookedText(true, bundleName, key, getInternalLocale(), args);
	}

	/**
	 * Returns the cooked text, based on the internal locale (= db/os locale), using the argument list <code>args</code>. If no text is
	 * found, <code>null</code> is returned.
	 */
	public String getInternalStringNoDef(final String bundleName, final String key, final Object... args) {
		return getCookedText(false, bundleName, key, getInternalLocale(), args);
	}

	/** Convenience static method for <code>getInternalString</code> */
	public static String sGetInternalString(final String bundleName, final String key, final Object... args) {
		return getCurrentInstance().getString(bundleName, key, args);
	}

	/** Convenience static method for <code>getInternalStringNoDef</code> */
	public static String sGetInternalStringNoDef(final String bundleName, final String key, final Object... args) {
		return getCurrentInstance().getStringNoDef(bundleName, key, args);
	}

	/** Base implementation returns the same as getRawText. This method is usually overwritten in subclasses. */
	protected String getCookedText(final boolean retDefIfNotAvail, final String bundleName, final String key, final Locale loc,
			final Object... args) {
		return getRawTextEx(retDefIfNotAvail, bundleName, key, loc);
	}

	/** Returns the first configured message provider */
	public static MessageProviderAbstract getCurrentInstance() {
		MessageProviderAbstract msgProv = ServiceLocator.findApplicationService(MessageProviderAbstract.class);
		if (msgProv == null)
			throw new IllegalStateException("No MessageProvider service found");
		return msgProv;
	}

	/** Returns the list of configured RawMessageProviders */
	protected List<RawMessageProviderAbstract> findRawMessageProviders() {
		return ServiceLocator.findApplicationServices(RawMessageProviderAbstract.class);
	}

	/** Needed to reset the message cache in a subclass of <code>RawMessageProviderCacheAbstract</code> */
	public void resetCache() {
		for (RawMessageProviderAbstract prov : findRawMessageProviders())
			prov.resetCache();
	}

	/** Convenience static method for <code>resetCache</code> */
	public static void sResetCache() {
		getCurrentInstance().resetCache();
	}

	public abstract Locale getExternalLocale();

	public abstract Locale getInternalLocale();

}
